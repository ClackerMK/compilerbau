PDefs. Program ::= [Def];

terminator Def "";


comment "//";
comment "/*" "*/";
comment "#";

DFun. Def ::= Inline Type Ident "(" [Arg] ")" "{" [Stm] "}";
DecFun. Def ::= Inline Type Ident "(" [Arg] ")" ";";
separator Arg ",";

IsInline. Inline ::= "inline";
NoInline. Inline ::= ;


DTypeDef. Def ::= TypeDef;
DStructDef. Def ::= StructDef;
DUsing. Def ::= "using" QConst ";";

ArgIdLess. Arg ::= Type;
ArgId. 		Arg ::= Type Ident;
ArgIdDefault. Arg ::= Type Ident "=" Exp;

ValInt. Value ::= Integer;
ValDouble. Value ::= Double;
ValChar. Value ::=  Char;
ValString. Value ::= [ValString];

ValSingleString. ValString ::= String;
separator nonempty ValString "";

TypeDef. TypeDef ::= "typedef" Type Ident ";";
StructDef. StructDef ::= "struct" Ident "{" [Decl] "}" ";";

StmDec. Stm ::= Decl ";";
StmExp. Stm ::= Exp ";";
StmRet. Stm ::= "return" Exp ";";
StmWhile. Stm ::= "while" "(" Exp ")" Stm;
StmDo. Stm ::= "do" Stm "while" "(" Exp ")" ";";
StmFor. Stm ::= "for" "(" Decl ";" Exp ";" Exp ")" Stm;
StmBlock. Stm ::= "{" [Stm] "}";
StmIf. Stm ::= "if" "(" Exp ")" Stm;
StmIfElse. Stm ::= "if" "(" Exp ")" Stm "else" Stm;

StmTypeDef. Stm ::= TypeDef;
StmStructDef. Stm ::= StructDef;
terminator Stm "";

ExVal.		Exp16 ::= Value;
ExIndex. 	Exp15 ::= Exp16 "[" Exp "]";
ExCall. 	Exp15 ::= Exp16 "(" [Exp] ")";
ExQConst.	Exp15 ::= QConst;
ExProjPoint.Exp14 ::= Exp15 "." Exp17;
ExProjArrow.Exp14 ::= Exp15 "->" Exp16; 
ExPostInc. 	Exp14 ::= Exp15 "++";
ExPostDec. 	Exp14 ::= Exp15 "--";
ExDeref. 	Exp14 ::= "*" Exp15;
ExPreInc. 	Exp13 ::= "++" Exp14;
ExPreDec. 	Exp13 ::= "--" Exp14;
ExNot. 		Exp13 ::= "!" Exp14;
ExMult. 	Exp12 ::= Exp13 "*" Exp14;
ExDiv. 		Exp12 ::= Exp13 "/" Exp14;
ExMod. 		Exp12 ::= Exp13 "%" Exp14;
ExAdd. 		Exp11 ::= Exp12 "+" Exp13;
ExSub. 		Exp11 ::= Exp12 "-" Exp13;
ExLeftShft.	Exp10 ::= Exp11 "<<" Exp12;
ExRightSft.	Exp10 ::= Exp11 ">>" Exp12;
ExLess. 	Exp9 ::= Exp10 "<" Exp11;
ExGreater. 	Exp9 ::= Exp10 ">" Exp11;
ExLessEq. 	Exp9 ::= Exp10 "<=" Exp11;
ExGreaterEq. Exp9 ::= Exp10 ">=" Exp11;
ExEqual.	Exp8 ::= Exp9 "==" Exp10;
ExInequal.	Exp8 ::= Exp9 "!=" Exp10;
ExConjunc.	Exp4 ::= Exp5 "&&" Exp6;
ExDisjunc.	Exp3 ::= Exp4 "||" Exp5;
ExAssign.	Exp2 ::= Exp3 "=" Exp4;
ExAddAssign. Exp2 ::= Exp3 "+=" Exp4;
ExSubAssign. Exp2 ::= Exp3 "-=" Exp4;
ExCond.		Exp2 ::= Exp3 "?" Exp3 ":" Exp3;
ExThrow.	Exp1 ::= "throw" Exp;
coercions Exp 16;
separator Exp ",";


TTemlate. 	Type ::= Type "<" [Type] ">";
TReference. Type ::= Type "&";
TConst.		Type ::= "const" Type;
TQConst.	Type ::= QConst;
separator 	Type ",";

QConstBase. QConst ::= Ident;
QConst.		QConst ::= QConst "::" QConst;


DecVar. Decl ::= Type [DeclName];
DecVarConst. Decl ::= Type  [DeclName];
terminator Decl ";";

DeclName. DeclName ::= Ident;
DeclNameInitial. DeclName ::= Ident "=" Exp;
separator DeclName ",";
