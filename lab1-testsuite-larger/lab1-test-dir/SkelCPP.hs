module SkelCPP where

-- Haskell module generated by the BNF converter

import AbsCPP
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transUIdent :: UIdent -> Result
transUIdent x = case x of
  UIdent string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  PDefs defs -> failure x
transDef :: Def -> Result
transDef x = case x of
  DFun fun -> failure x
  DIFun infun -> failure x
  DTypeDef typedef -> failure x
  DStructDef structdef -> failure x
  DUsing qconst -> failure x
  DDecVar decvar -> failure x
transInFun :: InFun -> Result
transInFun x = case x of
  InlineFunction fun -> failure x
transFun :: Fun -> Result
transFun x = case x of
  FuctionHead type_ uident args funbod -> failure x
transFunBod :: FunBod -> Result
transFunBod x = case x of
  FunctionBody -> failure x
  FunctionBodyStm stms -> failure x
transTypeDef :: TypeDef -> Result
transTypeDef x = case x of
  TypeDef type_ uident -> failure x
transStructDef :: StructDef -> Result
transStructDef x = case x of
  StructDef uident decvars -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ArgIdLess type_ -> failure x
  ArgDecVar type_ uident -> failure x
  ArgDecVarDefault type_ uident exp -> failure x
transDecVar :: DecVar -> Result
transDecVar x = case x of
  DecVar type_ uidents -> failure x
  DecVarDefault type_ uident exp -> failure x
transBType :: BType -> Result
transBType x = case x of
  TQConst qconst -> failure x
  TInt -> failure x
  TDouble -> failure x
  TBool -> failure x
  TVoid -> failure x
transType :: Type -> Result
transType x = case x of
  TType btype -> failure x
  TConst btype -> failure x
  TConstRef btype -> failure x
  TRef btype -> failure x
transValue :: Value -> Result
transValue x = case x of
  VInt integer -> failure x
  VDouble double -> failure x
  VChar char -> failure x
  ValConcatString valstrings -> failure x
transValString :: ValString -> Result
transValString x = case x of
  ValSingleString string -> failure x
transQConst :: QConst -> Result
transQConst x = case x of
  QConstRec qconst1 qconst2 -> failure x
  QConstBase uident -> failure x
  QConstTemplateBase tinstanciation -> failure x
transTInstanciation :: TInstanciation -> Result
transTInstanciation x = case x of
  Template uident types -> failure x
transStm :: Stm -> Result
transStm x = case x of
  StmDec decvar -> failure x
  StmExp exp -> failure x
  StmRet exp -> failure x
  StmWhile exp stm -> failure x
  StmDo stm exp -> failure x
  StmFor decvar exp1 exp2 stm -> failure x
  StmBlock stms -> failure x
  StmIf exp stm -> failure x
  StmIfElse exp stm1 stm2 -> failure x
  StmTypeDef typedef -> failure x
  StmStructDef structdef -> failure x
transExp :: Exp -> Result
transExp x = case x of
  ExValue value -> failure x
  ExIndex exp1 exp2 -> failure x
  ExCall exp exps -> failure x
  ExQConst qconst -> failure x
  ExProjPoint exp1 exp2 -> failure x
  ExProjArrow exp1 exp2 -> failure x
  ExPostInc exp -> failure x
  ExPostDec exp -> failure x
  ExDeref exp -> failure x
  ExPreInc exp -> failure x
  ExPreDec exp -> failure x
  ExNot exp -> failure x
  ExMult exp1 exp2 -> failure x
  ExDiv exp1 exp2 -> failure x
  ExMod exp1 exp2 -> failure x
  ExAdd exp1 exp2 -> failure x
  ExSub exp1 exp2 -> failure x
  ExLeftShft exp1 exp2 -> failure x
  ExRightSft exp1 exp2 -> failure x
  ExLess exp1 exp2 -> failure x
  ExGreater exp1 exp2 -> failure x
  ExLessEq exp1 exp2 -> failure x
  ExGreaterEq exp1 exp2 -> failure x
  ExEqual exp1 exp2 -> failure x
  ExInequal exp1 exp2 -> failure x
  ExConjunc exp1 exp2 -> failure x
  ExDisjunc exp1 exp2 -> failure x
  ExAssign exp1 exp2 -> failure x
  ExAddAssign exp1 exp2 -> failure x
  ExSubAssign exp1 exp2 -> failure x
  ExCond exp1 exp2 exp3 -> failure x
  ExThrow exp -> failure x

