module SkelCpp where

-- Haskell module generated by the BNF converter

import AbsCpp
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  PDefs defs -> failure x
transDef :: Def -> Result
transDef x = case x of
  DFun inline type_ ident args stms -> failure x
  DecFun inline type_ ident args -> failure x
  DTypeDef typedef -> failure x
  DStructDef structdef -> failure x
  DUsing qconst -> failure x
transInline :: Inline -> Result
transInline x = case x of
  IsInline -> failure x
  NoInline -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ArgIdLess type_ -> failure x
  ArgId type_ ident -> failure x
  ArgIdDefault type_ ident exp -> failure x
transValue :: Value -> Result
transValue x = case x of
  ValInt integer -> failure x
  ValDouble double -> failure x
  ValChar char -> failure x
  ValString valstrings -> failure x
transValString :: ValString -> Result
transValString x = case x of
  ValSingleString string -> failure x
transTypeDef :: TypeDef -> Result
transTypeDef x = case x of
  TypeDef type_ ident -> failure x
transStructDef :: StructDef -> Result
transStructDef x = case x of
  StructDef ident decls -> failure x
transStm :: Stm -> Result
transStm x = case x of
  StmDec decl -> failure x
  StmExp exp -> failure x
  StmRet exp -> failure x
  StmWhile exp stm -> failure x
  StmDo stm exp -> failure x
  StmFor decl exp1 exp2 stm -> failure x
  StmBlock stms -> failure x
  StmIf exp stm -> failure x
  StmIfElse exp stm1 stm2 -> failure x
  StmTypeDef typedef -> failure x
  StmStructDef structdef -> failure x
transExp :: Exp -> Result
transExp x = case x of
  ExVal value -> failure x
  ExName ident -> failure x
  ExIndex exp1 exp2 -> failure x
  ExCall exp exps -> failure x
  ExQConst qconst -> failure x
  ExProjPoint exp1 exp2 -> failure x
  ExProjArrow exp1 exp2 -> failure x
  ExPostInc exp -> failure x
  ExPostDec exp -> failure x
  ExDeref exp -> failure x
  ExPreInc exp -> failure x
  ExPreDec exp -> failure x
  ExNot exp -> failure x
  ExMult exp1 exp2 -> failure x
  ExDiv exp1 exp2 -> failure x
  ExMod exp1 exp2 -> failure x
  ExAdd exp1 exp2 -> failure x
  ExSub exp1 exp2 -> failure x
  ExLeftShft exp1 exp2 -> failure x
  ExRightSft exp1 exp2 -> failure x
  ExLess exp1 exp2 -> failure x
  ExGreater exp1 exp2 -> failure x
  ExLessEq exp1 exp2 -> failure x
  ExGreaterEq exp1 exp2 -> failure x
  ExEqual exp1 exp2 -> failure x
  ExInequal exp1 exp2 -> failure x
  ExConjunc exp1 exp2 -> failure x
  ExDisjunc exp1 exp2 -> failure x
  ExAssign exp1 exp2 -> failure x
  ExAddAssign exp1 exp2 -> failure x
  ExSubAssign exp1 exp2 -> failure x
  ExCond exp1 exp2 exp3 -> failure x
  ExThrow exp -> failure x
transType :: Type -> Result
transType x = case x of
  TTemlate type_ types -> failure x
  TReference type_ -> failure x
  TConst type_ -> failure x
  TQConst qconst -> failure x
transQConst :: QConst -> Result
transQConst x = case x of
  QConstBase ident -> failure x
  QConst qconst1 qconst2 -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DecVar type_ declnames -> failure x
  DecVarConst type_ declnames -> failure x
transDeclName :: DeclName -> Result
transDeclName x = case x of
  DeclName ident -> failure x
  DeclNameInitial ident exp -> failure x

