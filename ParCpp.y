-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParCpp where
import AbsCpp
import LexCpp
import ErrM

}

%name pProgram Program
%name pListDef ListDef
%name pDef Def
%name pListArg ListArg
%name pInline Inline
%name pArg Arg
%name pValue Value
%name pValString ValString
%name pListValString ListValString
%name pTypeDef TypeDef
%name pStructDef StructDef
%name pStm Stm
%name pListStm ListStm
%name pExp16 Exp16
%name pExp15 Exp15
%name pExp14 Exp14
%name pExp13 Exp13
%name pExp12 Exp12
%name pExp11 Exp11
%name pExp10 Exp10
%name pExp9 Exp9
%name pExp8 Exp8
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pExp Exp
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pListExp ListExp
%name pType Type
%name pListType ListType
%name pQConst QConst
%name pDecl Decl
%name pListDecl ListDecl
%name pDeclName DeclName
%name pListDeclName ListDeclName
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '++' { PT _ (TS _ 10) }
  '+=' { PT _ (TS _ 11) }
  ',' { PT _ (TS _ 12) }
  '-' { PT _ (TS _ 13) }
  '--' { PT _ (TS _ 14) }
  '-=' { PT _ (TS _ 15) }
  '->' { PT _ (TS _ 16) }
  '.' { PT _ (TS _ 17) }
  '/' { PT _ (TS _ 18) }
  ':' { PT _ (TS _ 19) }
  '::' { PT _ (TS _ 20) }
  ';' { PT _ (TS _ 21) }
  '<' { PT _ (TS _ 22) }
  '<<' { PT _ (TS _ 23) }
  '<=' { PT _ (TS _ 24) }
  '=' { PT _ (TS _ 25) }
  '==' { PT _ (TS _ 26) }
  '>' { PT _ (TS _ 27) }
  '>=' { PT _ (TS _ 28) }
  '>>' { PT _ (TS _ 29) }
  '?' { PT _ (TS _ 30) }
  '[' { PT _ (TS _ 31) }
  ']' { PT _ (TS _ 32) }
  'const' { PT _ (TS _ 33) }
  'do' { PT _ (TS _ 34) }
  'else' { PT _ (TS _ 35) }
  'for' { PT _ (TS _ 36) }
  'if' { PT _ (TS _ 37) }
  'inline' { PT _ (TS _ 38) }
  'return' { PT _ (TS _ 39) }
  'struct' { PT _ (TS _ 40) }
  'throw' { PT _ (TS _ 41) }
  'typedef' { PT _ (TS _ 42) }
  'using' { PT _ (TS _ 43) }
  'while' { PT _ (TS _ 44) }
  '{' { PT _ (TS _ 45) }
  '||' { PT _ (TS _ 46) }
  '}' { PT _ (TS _ 47) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_charac { PT _ (TC $$) }
L_quoted { PT _ (TL $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }
String  :: { String }  : L_quoted {  $1 }

Program :: { Program }
Program : ListDef { AbsCpp.PDefs (reverse $1) }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def { flip (:) $1 $2 }
Def :: { Def }
Def : Inline Type Ident '(' ListArg ')' '{' ListStm '}' { AbsCpp.DFun $1 $2 $3 $5 (reverse $8) }
    | Inline Type Ident '(' ListArg ')' ';' { AbsCpp.DecFun $1 $2 $3 $5 }
    | TypeDef { AbsCpp.DTypeDef $1 }
    | StructDef { AbsCpp.DStructDef $1 }
    | 'using' QConst ';' { AbsCpp.DUsing $2 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Inline :: { Inline }
Inline : 'inline' { AbsCpp.IsInline }
       | {- empty -} { AbsCpp.NoInline }
Arg :: { Arg }
Arg : Type { AbsCpp.ArgIdLess $1 }
    | Type Ident { AbsCpp.ArgId $1 $2 }
    | Type Ident '=' Exp { AbsCpp.ArgIdDefault $1 $2 $4 }
Value :: { Value }
Value : Integer { AbsCpp.ValInt $1 }
      | Double { AbsCpp.ValDouble $1 }
      | Char { AbsCpp.ValChar $1 }
      | ListValString { AbsCpp.ValString $1 }
ValString :: { ValString }
ValString : String { AbsCpp.ValSingleString $1 }
ListValString :: { [ValString] }
ListValString : ValString { (:[]) $1 }
              | ValString ListValString { (:) $1 $2 }
TypeDef :: { TypeDef }
TypeDef : 'typedef' Type Ident ';' { AbsCpp.TypeDef $2 $3 }
StructDef :: { StructDef }
StructDef : 'struct' Ident '{' ListDecl '}' ';' { AbsCpp.StructDef $2 (reverse $4) }
Stm :: { Stm }
Stm : Decl ';' { AbsCpp.StmDec $1 }
    | Exp ';' { AbsCpp.StmExp $1 }
    | 'return' Exp ';' { AbsCpp.StmRet $2 }
    | 'while' '(' Exp ')' Stm { AbsCpp.StmWhile $3 $5 }
    | 'do' Stm 'while' '(' Exp ')' ';' { AbsCpp.StmDo $2 $5 }
    | 'for' '(' Decl ';' Exp ';' Exp ')' Stm { AbsCpp.StmFor $3 $5 $7 $9 }
    | '{' ListStm '}' { AbsCpp.StmBlock (reverse $2) }
    | 'if' '(' Exp ')' Stm { AbsCpp.StmIf $3 $5 }
    | 'if' '(' Exp ')' Stm 'else' Stm { AbsCpp.StmIfElse $3 $5 $7 }
    | TypeDef { AbsCpp.StmTypeDef $1 }
    | StructDef { AbsCpp.StmStructDef $1 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
Exp16 :: { Exp }
Exp16 : Value { AbsCpp.ExVal $1 }
      | Ident { AbsCpp.ExName $1 }
      | '(' Exp ')' { $2 }
Exp15 :: { Exp }
Exp15 : Exp16 '[' Exp ']' { AbsCpp.ExIndex $1 $3 }
      | Exp16 '(' ListExp ')' { AbsCpp.ExCall $1 $3 }
      | QConst { AbsCpp.ExQConst $1 }
      | Exp16 { $1 }
Exp14 :: { Exp }
Exp14 : Exp15 '.' Exp15 { AbsCpp.ExProjPoint $1 $3 }
      | Exp15 '->' Exp15 { AbsCpp.ExProjArrow $1 $3 }
      | Exp15 '++' { AbsCpp.ExPostInc $1 }
      | Exp15 '--' { AbsCpp.ExPostDec $1 }
      | '*' Exp15 { AbsCpp.ExDeref $2 }
      | Exp15 { $1 }
Exp13 :: { Exp }
Exp13 : '++' Exp14 { AbsCpp.ExPreInc $2 }
      | '--' Exp14 { AbsCpp.ExPreDec $2 }
      | '!' Exp14 { AbsCpp.ExNot $2 }
      | Exp14 { $1 }
Exp12 :: { Exp }
Exp12 : Exp13 '*' Exp13 { AbsCpp.ExMult $1 $3 }
      | Exp13 '/' Exp13 { AbsCpp.ExDiv $1 $3 }
      | Exp13 '%' Exp13 { AbsCpp.ExMod $1 $3 }
      | Exp13 { $1 }
Exp11 :: { Exp }
Exp11 : Exp12 '+' Exp12 { AbsCpp.ExAdd $1 $3 }
      | Exp12 '-' Exp12 { AbsCpp.ExSub $1 $3 }
      | Exp12 { $1 }
Exp10 :: { Exp }
Exp10 : Exp11 '<<' Exp11 { AbsCpp.ExLeftShft $1 $3 }
      | Exp11 '>>' Exp11 { AbsCpp.ExRightSft $1 $3 }
      | Exp11 { $1 }
Exp9 :: { Exp }
Exp9 : Exp10 '<' Exp10 { AbsCpp.ExLess $1 $3 }
     | Exp10 '>' Exp10 { AbsCpp.ExGreater $1 $3 }
     | Exp10 '<=' Exp10 { AbsCpp.ExLessEq $1 $3 }
     | Exp10 '>=' Exp10 { AbsCpp.ExGreaterEq $1 $3 }
     | Exp10 { $1 }
Exp8 :: { Exp }
Exp8 : Exp9 '==' Exp9 { AbsCpp.ExEqual $1 $3 }
     | Exp9 '!=' Exp9 { AbsCpp.ExInequal $1 $3 }
     | Exp9 { $1 }
Exp4 :: { Exp }
Exp4 : Exp5 '&&' Exp5 { AbsCpp.ExConjunc $1 $3 } | Exp5 { $1 }
Exp3 :: { Exp }
Exp3 : Exp4 '||' Exp4 { AbsCpp.ExDisjunc $1 $3 } | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : Exp3 '=' Exp3 { AbsCpp.ExAssign $1 $3 }
     | Exp3 '+=' Exp3 { AbsCpp.ExAddAssign $1 $3 }
     | Exp3 '-=' Exp3 { AbsCpp.ExSubAssign $1 $3 }
     | Exp3 '?' Exp3 ':' Exp3 { AbsCpp.ExCond $1 $3 $5 }
     | Exp3 { $1 }
Exp1 :: { Exp }
Exp1 : 'throw' Exp { AbsCpp.ExThrow $2 } | Exp2 { $1 }
Exp :: { Exp }
Exp : Exp1 { $1 }
Exp5 :: { Exp }
Exp5 : Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp8 { $1 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
Type :: { Type }
Type : Type '<' ListType '>' { AbsCpp.TTemlate $1 $3 }
     | Type '&' { AbsCpp.TReference $1 }
     | 'const' Type { AbsCpp.TConst $2 }
     | QConst { AbsCpp.TQConst $1 }
ListType :: { [Type] }
ListType : {- empty -} { [] }
         | Type { (:[]) $1 }
         | Type ',' ListType { (:) $1 $3 }
QConst :: { QConst }
QConst : Ident { AbsCpp.QConstBase $1 }
       | QConst '::' QConst { AbsCpp.QConst $1 $3 }
Decl :: { Decl }
Decl : Type ListDeclName { AbsCpp.DecVar $1 $2 }
     | Type ListDeclName { AbsCpp.DecVarConst $1 $2 }
ListDecl :: { [Decl] }
ListDecl : {- empty -} { [] }
         | ListDecl Decl ';' { flip (:) $1 $2 }
DeclName :: { DeclName }
DeclName : Ident { AbsCpp.DeclName $1 }
         | Ident '=' Exp { AbsCpp.DeclNameInitial $1 $3 }
ListDeclName :: { [DeclName] }
ListDeclName : {- empty -} { [] }
             | DeclName { (:[]) $1 }
             | DeclName ',' ListDeclName { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

