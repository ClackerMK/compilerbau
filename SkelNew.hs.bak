module SkelNew where

-- Haskell module generated by the BNF converter

import AbsNew
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  PDefs defs -> failure x
transDef :: Def -> Result
transDef x = case x of
  DFun fun -> failure x
  DIFun infun -> failure x
transInFun :: InFun -> Result
transInFun x = case x of
  InlineFunction fun -> failure x
transFun :: Fun -> Result
transFun x = case x of
  FuctionHead type_ ident args funbod -> failure x
transFunBod :: FunBod -> Result
transFunBod x = case x of
  FunctionBody -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ArgIdLess type_ -> failure x
  ArgId type_ name -> failure x
  ArgIdDefault type_ name exp -> failure x
transType :: Type -> Result
transType x = case x of
  TName name -> failure x
  TConst name -> failure x
  TRef type_ -> failure x
transValue :: Value -> Result
transValue x = case x of
  VInt integer -> failure x
  VDouble double -> failure x
  VChar char -> failure x
  ValString valstrings -> failure x
transValString :: ValString -> Result
transValString x = case x of
  ValSingleString string -> failure x
transName :: Name -> Result
transName x = case x of
  Name ident -> failure x
transQConst :: QConst -> Result
transQConst x = case x of
  QConstBase name -> failure x
transExp :: Exp -> Result
transExp x = case x of
  ExValue value -> failure x
  ExName name -> failure x
  ExIndex exp1 exp2 -> failure x
  ExCall exp exps -> failure x
  ExProjPoint exp1 exp2 -> failure x
  ExProjArrow exp1 exp2 -> failure x
  ExPostInc exp -> failure x
  ExPostDec exp -> failure x
  ExDeref exp -> failure x
  ExPreInc exp -> failure x
  ExPreDec exp -> failure x
  ExNot exp -> failure x
  ExMult exp1 exp2 -> failure x
  ExDiv exp1 exp2 -> failure x
  ExMod exp1 exp2 -> failure x
  ExAdd exp1 exp2 -> failure x
  ExSub exp1 exp2 -> failure x
  ExLeftShft exp1 exp2 -> failure x
  ExRightSft exp1 exp2 -> failure x
  ExLess exp1 exp2 -> failure x
  ExGreater exp1 exp2 -> failure x
  ExLessEq exp1 exp2 -> failure x
  ExGreaterEq exp1 exp2 -> failure x
  ExEqual exp1 exp2 -> failure x
  ExInequal exp1 exp2 -> failure x
  ExConjunc exp1 exp2 -> failure x
  ExDisjunc exp1 exp2 -> failure x
  ExAssign exp1 exp2 -> failure x
  ExAddAssign exp1 exp2 -> failure x
  ExSubAssign exp1 exp2 -> failure x
  ExCond exp1 exp2 exp3 -> failure x
  ExThrow exp -> failure x

