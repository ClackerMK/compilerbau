

module AbsNew where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def = DFun Fun | DIFun InFun
  deriving (Eq, Ord, Show, Read)

data InFun = InlineFunction Fun
  deriving (Eq, Ord, Show, Read)

data Fun = FuctionHead Type Ident [Arg] FunBod
  deriving (Eq, Ord, Show, Read)

data FunBod = FunctionBody
  deriving (Eq, Ord, Show, Read)

data Arg
    = ArgIdLess Type | ArgId Type Name | ArgIdDefault Type Name Exp
  deriving (Eq, Ord, Show, Read)

data Type = TName Name | TConst Name | TRef Type
  deriving (Eq, Ord, Show, Read)

data Value
    = VInt Integer
    | VDouble Double
    | VChar Char
    | ValString [ValString]
  deriving (Eq, Ord, Show, Read)

data ValString = ValSingleString String
  deriving (Eq, Ord, Show, Read)

data Name = Name Ident
  deriving (Eq, Ord, Show, Read)

data QConst = QConstBase Name
  deriving (Eq, Ord, Show, Read)

data Exp
    = ExValue Value
    | ExName Name
    | ExIndex Exp Exp
    | ExCall Exp [Exp]
    | ExQConst [QConst]
    | ExProjPoint Exp Exp
    | ExProjArrow Exp Exp
    | ExPostInc Exp
    | ExPostDec Exp
    | ExDeref Exp
    | ExPreInc Exp
    | ExPreDec Exp
    | ExNot Exp
    | ExMult Exp Exp
    | ExDiv Exp Exp
    | ExMod Exp Exp
    | ExAdd Exp Exp
    | ExSub Exp Exp
    | ExLeftShft Exp Exp
    | ExRightSft Exp Exp
    | ExLess Exp Exp
    | ExGreater Exp Exp
    | ExLessEq Exp Exp
    | ExGreaterEq Exp Exp
    | ExEqual Exp Exp
    | ExInequal Exp Exp
    | ExConjunc Exp Exp
    | ExDisjunc Exp Exp
    | ExAssign Exp Exp
    | ExAddAssign Exp Exp
    | ExSubAssign Exp Exp
    | ExCond Exp Exp Exp
    | ExThrow Exp
  deriving (Eq, Ord, Show, Read)

