-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGrammar where
import AbsGrammar
import LexGrammar
import ErrM

}

%name pProgram Program
%name pListDef ListDef
%name pDef Def
%name pListArg ListArg
%name pListStm ListStm
%name pListId ListId
%name pStructDec StructDec
%name pListStructDec ListStructDec
%name pArg Arg
%name pStm Stm
%name pDec Dec
%name pListDec ListDec
%name pExp16 Exp16
%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pExp8 Exp8
%name pExp9 Exp9
%name pExp10 Exp10
%name pExp11 Exp11
%name pExp12 Exp12
%name pExp13 Exp13
%name pExp14 Exp14
%name pExp15 Exp15
%name pListString ListString
%name pListExp ListExp
%name pType Type
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '++' { PT _ (TS _ 10) }
  '+=' { PT _ (TS _ 11) }
  ',' { PT _ (TS _ 12) }
  '-' { PT _ (TS _ 13) }
  '--' { PT _ (TS _ 14) }
  '-=' { PT _ (TS _ 15) }
  '->' { PT _ (TS _ 16) }
  '.' { PT _ (TS _ 17) }
  '/' { PT _ (TS _ 18) }
  ':' { PT _ (TS _ 19) }
  '::' { PT _ (TS _ 20) }
  ';' { PT _ (TS _ 21) }
  '<' { PT _ (TS _ 22) }
  '<<' { PT _ (TS _ 23) }
  '<=' { PT _ (TS _ 24) }
  '=' { PT _ (TS _ 25) }
  '==' { PT _ (TS _ 26) }
  '>' { PT _ (TS _ 27) }
  '>=' { PT _ (TS _ 28) }
  '>>' { PT _ (TS _ 29) }
  '?' { PT _ (TS _ 30) }
  '[' { PT _ (TS _ 31) }
  ']' { PT _ (TS _ 32) }
  'bool' { PT _ (TS _ 33) }
  'const' { PT _ (TS _ 34) }
  'do' { PT _ (TS _ 35) }
  'double' { PT _ (TS _ 36) }
  'else' { PT _ (TS _ 37) }
  'for' { PT _ (TS _ 38) }
  'if' { PT _ (TS _ 39) }
  'inline' { PT _ (TS _ 40) }
  'int' { PT _ (TS _ 41) }
  'return' { PT _ (TS _ 42) }
  'struct' { PT _ (TS _ 43) }
  'throw' { PT _ (TS _ 44) }
  'typedef' { PT _ (TS _ 45) }
  'using' { PT _ (TS _ 46) }
  'void' { PT _ (TS _ 47) }
  'while' { PT _ (TS _ 48) }
  '{' { PT _ (TS _ 49) }
  '||' { PT _ (TS _ 50) }
  '}' { PT _ (TS _ 51) }

L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_charac { PT _ (TC $$) }
L_quoted { PT _ (TL $$) }
L_Id { PT _ (T_Id $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }
String  :: { String }  : L_quoted {  $1 }
Id    :: { Id} : L_Id { Id ($1)}

Program :: { Program }
Program : ListDef { AbsGrammar.PDefs (reverse $1) }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def { flip (:) $1 $2 }
Def :: { Def }
Def : Type Id '(' ListArg ')' '{' ListStm '}' { AbsGrammar.DFun $1 $2 $4 (reverse $7) }
    | 'inline' Type Id '(' ListArg ')' '{' ListStm '}' { AbsGrammar.DFunIn $2 $3 $5 (reverse $8) }
    | 'typedef' Type Id ';' { AbsGrammar.DTypdf $2 $3 }
    | Type Id ',' ListId ';' { AbsGrammar.DVarDec $1 $2 $4 }
    | Type Id '=' Exp ';' { AbsGrammar.DVarIn $1 $2 $4 }
    | 'struct' Id '{' ListStructDec '}' ';' { AbsGrammar.DStruct $2 (reverse $4) }
    | 'using' Type ';' { AbsGrammar.Dusing $2 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
ListId :: { [Id] }
ListId : {- empty -} { [] }
       | Id { (:[]) $1 }
       | Id ',' ListId { (:) $1 $3 }
StructDec :: { StructDec }
StructDec : Type Id ';' { AbsGrammar.Struct $1 $2 }
ListStructDec :: { [StructDec] }
ListStructDec : {- empty -} { [] }
              | ListStructDec StructDec { flip (:) $1 $2 }
Arg :: { Arg }
Arg : Type { AbsGrammar.ArgDec1 $1 }
    | Type Id { AbsGrammar.ArgDec2 $1 $2 }
    | Type Id '=' Exp { AbsGrammar.ArgDec3 $1 $2 $4 }
    | 'const' Type '&' Id { AbsGrammar.ArgConst $2 $4 }
Stm :: { Stm }
Stm : Exp ';' { AbsGrammar.StmExp $1 }
    | ListDec ';' { AbsGrammar.StmDec (reverse $1) }
    | 'return' Exp ';' { AbsGrammar.StmReturn $2 }
    | 'while' '(' Exp ')' Stm { AbsGrammar.StmWhile $3 $5 }
    | 'do' Stm 'while' '(' Exp ')' Stm { AbsGrammar.StmDoWhil $2 $5 $7 }
    | 'for' '(' Type Id '=' Exp ';' Exp ';' Exp ')' Stm { AbsGrammar.StmFor $3 $4 $6 $8 $10 $12 }
    | 'if' '(' Exp ')' Stm { AbsGrammar.StmIf $3 $5 }
    | 'if' '(' Exp ')' Stm ';' 'else' Stm { AbsGrammar.StmIfElse $3 $5 $8 }
    | '{' ListStm '}' { AbsGrammar.StmBlock (reverse $2) }
    | 'typedef' Type Id ';' { AbsGrammar.StmTypeDef $2 $3 }
    | 'struct' Id '{' ListStructDec '}' ';' { AbsGrammar.StmStruct $2 (reverse $4) }
Dec :: { Dec }
Dec : Type Id ';' { AbsGrammar.StmDec1 $1 $2 }
    | Type Id '=' Exp ';' { AbsGrammar.StmDec2 $1 $2 $4 }
    | Type Id ',' ListId ';' { AbsGrammar.StmDec3 $1 $2 $4 }
ListDec :: { [Dec] }
ListDec : {- empty -} { [] } | ListDec Dec { flip (:) $1 $2 }
Exp16 :: { Exp }
Exp16 : Integer { AbsGrammar.ExInt $1 }
      | Double { AbsGrammar.ExDouble $1 }
      | Char { AbsGrammar.ExChar $1 }
      | ListString { AbsGrammar.ExString $1 }
      | '(' Exp ')' { $2 }
Exp :: { Exp }
Exp : Exp1 { $1 }
Exp1 :: { Exp }
Exp1 : Exp2 { $1 } | 'throw' Exp { AbsGrammar.ExExep $2 }
Exp2 :: { Exp }
Exp2 : Exp3 { $1 }
     | Exp '=' Exp { AbsGrammar.ExAssig1 $1 $3 }
     | Exp '+=' Exp { AbsGrammar.ExAssig2 $1 $3 }
     | Exp '-=' Exp { AbsGrammar.ExAssig3 $1 $3 }
     | Exp '?' Exp { AbsGrammar.ExCond1 $1 $3 }
     | Exp ':' Exp { AbsGrammar.ExCond2 $1 $3 }
Exp3 :: { Exp }
Exp3 : Exp4 { $1 } | Exp '||' Exp { AbsGrammar.ExDisj $1 $3 }
Exp4 :: { Exp }
Exp4 : Exp5 { $1 } | Exp '&&' Exp { AbsGrammar.ExConj $1 $3 }
Exp5 :: { Exp }
Exp5 : Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp8 { $1 }
Exp8 :: { Exp }
Exp8 : Exp9 { $1 }
     | Exp '==' Exp { AbsGrammar.ExEqual $1 $3 }
     | Exp '!=' Exp { AbsGrammar.ExInequal $1 $3 }
Exp9 :: { Exp }
Exp9 : Exp10 { $1 }
     | Exp '<' Exp { AbsGrammar.ExComp1 $1 $3 }
     | Exp '>' Exp { AbsGrammar.ExComp2 $1 $3 }
     | Exp '>=' Exp { AbsGrammar.ExComp3 $1 $3 }
     | Exp '<=' Exp { AbsGrammar.ExComp4 $1 $3 }
Exp10 :: { Exp }
Exp10 : Exp11 { $1 }
      | Exp '<<' Exp { AbsGrammar.ExLeftSh $1 $3 }
      | Exp '>>' Exp { AbsGrammar.ExRightSh $1 $3 }
Exp11 :: { Exp }
Exp11 : Exp12 { $1 }
      | Exp '+' Exp { AbsGrammar.ExpAdd $1 $3 }
      | Exp '-' Exp { AbsGrammar.ExSub $1 $3 }
Exp12 :: { Exp }
Exp12 : Exp13 { $1 }
      | Exp '*' Exp { AbsGrammar.ExMult $1 $3 }
      | Exp '/' Exp { AbsGrammar.ExDiv $1 $3 }
      | Exp '%' Exp { AbsGrammar.ExRem $1 $3 }
Exp13 :: { Exp }
Exp13 : Exp14 { $1 }
      | '++' Exp { AbsGrammar.ExInc2 $2 }
      | '--' Exp { AbsGrammar.ExDec2 $2 }
      | '!' Exp { AbsGrammar.ExNeg $2 }
Exp14 :: { Exp }
Exp14 : Exp15 { $1 }
      | Exp '.' Exp { AbsGrammar.ExStrProj1 $1 $3 }
      | Exp '->' Exp { AbsGrammar.ExStrProj2 $1 $3 }
      | Exp '++' { AbsGrammar.ExInc1 $1 }
      | Exp '--' { AbsGrammar.ExDec1 $1 }
      | '*' Exp { AbsGrammar.ExDeref $2 }
Exp15 :: { Exp }
Exp15 : Exp16 { $1 }
      | Id '[' Exp ']' { AbsGrammar.ExIndex $1 $3 }
      | Id '::' Id { AbsGrammar.ExQualConst $1 $3 }
      | Id '(' ListExp ')' { AbsGrammar.ExFunCall $1 $3 }
ListString :: { [String] }
ListString : {- empty -} { [] } | String ListString { (:) $1 $2 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
Type :: { Type }
Type : 'bool' { AbsGrammar.Typbool }
     | 'double' { AbsGrammar.Typdouble }
     | 'int' { AbsGrammar.Typint }
     | 'void' { AbsGrammar.Typvoid }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

