

module AbsGrammar where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def
    = DFun Type Id [Arg] [Stm]
    | DFunIn Type Id [Arg] [Stm]
    | DTypdf Type Id
    | DVarDec Type Id [Id]
    | DVarIn Type Id Exp
    | DStruct Id [StructDec]
    | Dusing Type
  deriving (Eq, Ord, Show, Read)

data StructDec = Struct Type Id
  deriving (Eq, Ord, Show, Read)

data Arg
    = ArgDec1 Type
    | ArgDec2 Type Id
    | ArgDec3 Type Id Exp
    | ArgConst Type Id
  deriving (Eq, Ord, Show, Read)

data Stm
    = StmExp Exp
    | StmDec [Dec]
    | StmReturn Exp
    | StmWhile Exp Stm
    | StmDoWhil Stm Exp Stm
    | StmFor Type Id Exp Exp Exp Stm
    | StmIf Exp Stm
    | StmIfElse Exp Stm Stm
    | StmBlock [Stm]
    | StmTypeDef Type Id
    | StmStruct Id [StructDec]
  deriving (Eq, Ord, Show, Read)

data Dec
    = StmDec1 Type Id | StmDec2 Type Id Exp | StmDec3 Type Id [Id]
  deriving (Eq, Ord, Show, Read)

data Exp
    = ExInt Integer
    | ExDouble Double
    | ExChar Char
    | ExString [String]
    | ExIndex Id Exp
    | ExQualConst Id Id
    | ExFunCall Id [Exp]
    | ExStrProj1 Exp Exp
    | ExStrProj2 Exp Exp
    | ExInc1 Exp
    | ExDec1 Exp
    | ExDeref Exp
    | ExInc2 Exp
    | ExDec2 Exp
    | ExNeg Exp
    | ExMult Exp Exp
    | ExDiv Exp Exp
    | ExRem Exp Exp
    | ExpAdd Exp Exp
    | ExSub Exp Exp
    | ExLeftSh Exp Exp
    | ExRightSh Exp Exp
    | ExComp1 Exp Exp
    | ExComp2 Exp Exp
    | ExComp3 Exp Exp
    | ExComp4 Exp Exp
    | ExEqual Exp Exp
    | ExInequal Exp Exp
    | ExConj Exp Exp
    | ExDisj Exp Exp
    | ExAssig1 Exp Exp
    | ExAssig2 Exp Exp
    | ExAssig3 Exp Exp
    | ExCond1 Exp Exp
    | ExCond2 Exp Exp
    | ExExep Exp
  deriving (Eq, Ord, Show, Read)

data Type = Typbool | Typdouble | Typint | Typvoid
  deriving (Eq, Ord, Show, Read)

